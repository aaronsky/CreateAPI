// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import NaiveDate

public struct ActionsBillingUsage: Codable {
    /// The sum of the free and paid GitHub Actions minutes used.
    public var totalMinutesUsed: Int
    /// The total paid GitHub Actions minutes used.
    public var totalPaidMinutesUsed: Int
    /// The amount of free GitHub Actions minutes available.
    public var includedMinutes: Int
    public var minutesUsedBreakdown: MinutesUsedBreakdown

    public struct MinutesUsedBreakdown: Codable {
        /// Total minutes used on Ubuntu runner machines.
        public var ubuntu: Int?
        /// Total minutes used on macOS runner machines.
        public var macOS: Int?
        /// Total minutes used on Windows runner machines.
        public var windows: Int?

        public init(ubuntu: Int? = nil, macOS: Int? = nil, windows: Int? = nil) {
            self.ubuntu = ubuntu
            self.macOS = macOS
            self.windows = windows
        }

        public init(from decoder: any Decoder) throws {
            let values = try decoder.container(keyedBy: StringCodingKey.self)
            self.ubuntu = try values.decodeIfPresent(Int.self, forKey: "UBUNTU")
            self.macOS = try values.decodeIfPresent(Int.self, forKey: "MACOS")
            self.windows = try values.decodeIfPresent(Int.self, forKey: "WINDOWS")
        }

        public func encode(to encoder: any Encoder) throws {
            var values = encoder.container(keyedBy: StringCodingKey.self)
            try values.encodeIfPresent(ubuntu, forKey: "UBUNTU")
            try values.encodeIfPresent(macOS, forKey: "MACOS")
            try values.encodeIfPresent(windows, forKey: "WINDOWS")
        }
    }

    public init(totalMinutesUsed: Int, totalPaidMinutesUsed: Int, includedMinutes: Int, minutesUsedBreakdown: MinutesUsedBreakdown) {
        self.totalMinutesUsed = totalMinutesUsed
        self.totalPaidMinutesUsed = totalPaidMinutesUsed
        self.includedMinutes = includedMinutes
        self.minutesUsedBreakdown = minutesUsedBreakdown
    }

    public init(from decoder: any Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.totalMinutesUsed = try values.decode(Int.self, forKey: "total_minutes_used")
        self.totalPaidMinutesUsed = try values.decode(Int.self, forKey: "total_paid_minutes_used")
        self.includedMinutes = try values.decode(Int.self, forKey: "included_minutes")
        self.minutesUsedBreakdown = try values.decode(MinutesUsedBreakdown.self, forKey: "minutes_used_breakdown")
    }

    public func encode(to encoder: any Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encode(totalMinutesUsed, forKey: "total_minutes_used")
        try values.encode(totalPaidMinutesUsed, forKey: "total_paid_minutes_used")
        try values.encode(includedMinutes, forKey: "included_minutes")
        try values.encode(minutesUsedBreakdown, forKey: "minutes_used_breakdown")
    }
}
